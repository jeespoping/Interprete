
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENrightUMINUSCIN COUT DEQUAL DISTINT DIVIDE ELSE EQUAL FOR GREATER GREATEREQUAL ID IF INT LBLOCK LESS LESSEQUAL LPAREN MINUS NUMBER PLUS RBLOCK RPAREN SEMICOLON STR STRING TIMES WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : statement\n                        | sentencia\n    statement : INT ID EQUAL expression SEMICOLONstatement : CIN ID SEMICOLONstatement : STR ID EQUAL STRING SEMICOLONstatement : COUT expression SEMICOLONexpression : expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression\n                      | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERsentencia_mientras : WHILE LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK\n    sentencia_para : FOR LPAREN ID EQUAL expression SEMICOLON expression RPAREN LBLOCK lista_sentencia RBLOCKsentencia_si : IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK\n                    | IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK ELSE LPAREN RPAREN LBLOCK lista_sentencia RBLOCKcondiciones : LESS\n                    | GREATER\n                    | DEQUAL\n                    | DISTINT\n                    | LESSEQUAL\n                    | GREATEREQUAL condicion : expression condiciones expressionsentencia : sentencia_mientras\n                    | statement\n                    | sentencia_para\n                    | sentencia_si\n    lista_sentencia : lista_sentencia sentencia\n                    | sentencia\n    expression : ID'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[6,6,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,6,6,6,-33,-29,6,-17,-32,-19,6,6,-18,6,6,-20,]),'CIN':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[7,7,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,7,7,7,-33,-29,7,-17,-32,-19,7,7,-18,7,7,-20,]),'STR':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[8,8,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,8,8,8,-33,-29,8,-17,-32,-19,8,8,-18,8,8,-20,]),'COUT':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[9,9,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,9,9,9,-33,-29,9,-17,-32,-19,9,9,-18,9,9,-20,]),'WHILE':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[13,13,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,13,13,13,-33,-29,13,-17,-32,-19,13,13,-18,13,13,-20,]),'FOR':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[14,14,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,14,14,14,-33,-29,14,-17,-32,-19,14,14,-18,14,14,-20,]),'IF':([0,2,3,4,5,10,11,12,16,29,31,59,60,61,64,65,66,67,69,70,71,73,76,78,80,81,82,83,],[15,15,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,15,15,15,-33,-29,15,-17,-32,-19,15,15,-18,15,15,-20,]),'$end':([1,2,3,4,5,10,11,12,16,29,31,59,60,70,73,80,83,],[0,-1,-3,-4,-5,-28,-30,-31,-2,-7,-9,-6,-8,-17,-19,-18,-20,]),'ID':([6,7,8,9,21,22,25,26,27,28,32,33,34,35,50,51,52,53,54,55,56,57,68,],[17,18,19,24,24,24,24,40,24,24,24,24,24,24,24,-21,-22,-23,-24,-25,-26,24,24,]),'MINUS':([9,20,21,22,23,24,25,27,28,32,33,34,35,36,37,39,42,44,45,46,47,48,50,51,52,53,54,55,56,57,62,63,68,72,],[21,33,21,21,-16,-34,21,21,21,21,21,21,21,-14,33,33,33,-10,-11,-12,-13,-15,21,-21,-22,-23,-24,-25,-26,21,33,33,21,33,]),'LPAREN':([9,13,14,15,21,22,25,27,28,32,33,34,35,50,51,52,53,54,55,56,57,68,75,],[22,25,26,27,22,22,22,22,22,22,22,22,22,22,-21,-22,-23,-24,-25,-26,22,22,77,]),'NUMBER':([9,21,22,25,27,28,32,33,34,35,50,51,52,53,54,55,56,57,68,],[23,23,23,23,23,23,23,23,23,23,23,-21,-22,-23,-24,-25,-26,23,23,]),'RBLOCK':([10,11,12,29,31,59,60,65,66,67,69,70,71,73,78,80,82,83,],[-28,-30,-31,-7,-9,-6,-8,70,-33,-29,73,-17,-32,-19,80,-18,83,-20,]),'EQUAL':([17,19,40,],[28,30,57,]),'SEMICOLON':([18,20,23,24,36,42,43,44,45,46,47,48,63,],[29,31,-16,-34,-14,59,60,-10,-11,-12,-13,-15,68,]),'PLUS':([20,23,24,36,37,39,42,44,45,46,47,48,62,63,72,],[32,-16,-34,-14,32,32,32,-10,-11,-12,-13,-15,32,32,32,]),'TIMES':([20,23,24,36,37,39,42,44,45,46,47,48,62,63,72,],[34,-16,-34,-14,34,34,34,34,34,-12,-13,-15,34,34,34,]),'DIVIDE':([20,23,24,36,37,39,42,44,45,46,47,48,62,63,72,],[35,-16,-34,-14,35,35,35,35,35,-12,-13,-15,35,35,35,]),'RPAREN':([23,24,36,37,38,41,44,45,46,47,48,62,72,77,],[-16,-34,-14,48,49,58,-10,-11,-12,-13,-15,-27,74,79,]),'LESS':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,51,-10,-11,-12,-13,-15,]),'GREATER':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,52,-10,-11,-12,-13,-15,]),'DEQUAL':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,53,-10,-11,-12,-13,-15,]),'DISTINT':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,54,-10,-11,-12,-13,-15,]),'LESSEQUAL':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,55,-10,-11,-12,-13,-15,]),'GREATEREQUAL':([23,24,36,39,44,45,46,47,48,],[-16,-34,-14,56,-10,-11,-12,-13,-15,]),'STRING':([30,],[43,]),'LBLOCK':([49,58,74,79,],[61,64,76,81,]),'ELSE':([73,],[75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,16,]),'statement':([0,2,61,64,65,69,76,78,81,82,],[4,4,67,67,67,67,67,67,67,67,]),'sentencia':([0,2,61,64,65,69,76,78,81,82,],[5,5,66,66,71,71,66,71,66,71,]),'sentencia_mientras':([0,2,61,64,65,69,76,78,81,82,],[10,10,10,10,10,10,10,10,10,10,]),'sentencia_para':([0,2,61,64,65,69,76,78,81,82,],[11,11,11,11,11,11,11,11,11,11,]),'sentencia_si':([0,2,61,64,65,69,76,78,81,82,],[12,12,12,12,12,12,12,12,12,12,]),'expression':([9,21,22,25,27,28,32,33,34,35,50,57,68,],[20,36,37,39,39,42,44,45,46,47,62,63,72,]),'condicion':([25,27,],[38,41,]),'condiciones':([39,],[50,]),'lista_sentencia':([61,64,76,81,],[65,69,78,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','i_parser.py',22),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','i_parser.py',26),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','i_parser.py',31),
  ('declaration -> statement','declaration',1,'p_declaration','i_parser.py',35),
  ('declaration -> sentencia','declaration',1,'p_declaration','i_parser.py',36),
  ('statement -> INT ID EQUAL expression SEMICOLON','statement',5,'p_statement_assign','i_parser.py',41),
  ('statement -> CIN ID SEMICOLON','statement',3,'p_statement_entrada','i_parser.py',45),
  ('statement -> STR ID EQUAL STRING SEMICOLON','statement',5,'p_statement_assign_str','i_parser.py',48),
  ('statement -> COUT expression SEMICOLON','statement',3,'p_statement_expr','i_parser.py',52),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','i_parser.py',56),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','i_parser.py',57),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','i_parser.py',58),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','i_parser.py',59),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','i_parser.py',70),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','i_parser.py',74),
  ('expression -> NUMBER','expression',1,'p_expression_number','i_parser.py',78),
  ('sentencia_mientras -> WHILE LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_mientras',7,'p_sentencia_mientras','i_parser.py',82),
  ('sentencia_para -> FOR LPAREN ID EQUAL expression SEMICOLON expression RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_para',11,'p_sentencia_para','i_parser.py',85),
  ('sentencia_si -> IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_si',7,'p_sentencia_si','i_parser.py',88),
  ('sentencia_si -> IF LPAREN condicion RPAREN LBLOCK lista_sentencia RBLOCK ELSE LPAREN RPAREN LBLOCK lista_sentencia RBLOCK','sentencia_si',13,'p_sentencia_si','i_parser.py',89),
  ('condiciones -> LESS','condiciones',1,'p_condiciones','i_parser.py',92),
  ('condiciones -> GREATER','condiciones',1,'p_condiciones','i_parser.py',93),
  ('condiciones -> DEQUAL','condiciones',1,'p_condiciones','i_parser.py',94),
  ('condiciones -> DISTINT','condiciones',1,'p_condiciones','i_parser.py',95),
  ('condiciones -> LESSEQUAL','condiciones',1,'p_condiciones','i_parser.py',96),
  ('condiciones -> GREATEREQUAL','condiciones',1,'p_condiciones','i_parser.py',97),
  ('condicion -> expression condiciones expression','condicion',3,'p_condicion','i_parser.py',100),
  ('sentencia -> sentencia_mientras','sentencia',1,'p_sentencia','i_parser.py',103),
  ('sentencia -> statement','sentencia',1,'p_sentencia','i_parser.py',104),
  ('sentencia -> sentencia_para','sentencia',1,'p_sentencia','i_parser.py',105),
  ('sentencia -> sentencia_si','sentencia',1,'p_sentencia','i_parser.py',106),
  ('lista_sentencia -> lista_sentencia sentencia','lista_sentencia',2,'p_lista_sentencia','i_parser.py',110),
  ('lista_sentencia -> sentencia','lista_sentencia',1,'p_lista_sentencia','i_parser.py',111),
  ('expression -> ID','expression',1,'p_expression_id','i_parser.py',115),
]
